name: Release a new version

on:
  workflow_dispatch:
  pull_request:
    types: 
      - closed
    branches: 
      - 'develop'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump-new-release:
    name: Update release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    permissions:
      contents: read
      deployments: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: git config
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config -l

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - run: npm ci
  
      - run: npm run release -- --git.pushRepo="https://${{ secrets.RELEASEIT_TOKEN }}@github.com/${{ github.repository }}.git"
        env:
          GITHUB_TOCKEN: ${{ secrets.RELEASEIT_TOKEN }}

  build-and-push-image:
    name: Create a Docker Image and publish it to Github registry
    runs-on: ubuntu-latest
    needs: bump-new-release
    environment: stage

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - run: git checkout HEAD^

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create Drone build for stage
        run: |
          curl -X POST "${{ vars.DRONE_HOST }}/api/repos/${{ github.repository }}/builds?branch=${{ github.ref_name }}&commit=${{ github.sha }}" -H "Authorization: Bearer ${{ secrets.DRONE_TOKEN }}"
